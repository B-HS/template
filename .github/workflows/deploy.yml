name: Deploy Project

on:
    push:
        branches:
            - deploy

jobs:
    deploy:
        runs-on: ubuntu-latest

        env:
            PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
            HOST_IP: ${{ secrets.HOST_IP }}
            HOST_USERNAME: ${{ secrets.HOST_USERNAME }}
            PROJECT_PORT: ${{ secrets.PROJECT_PORT }}
            ENV_TEXT: ${{ secrets.ENV_TEXT }}

        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Build Docker Image
              run: docker build -t ${{ env.PROJECT_NAME }} .

            - name: Save Docker image as tar
              run: docker save ${{ env.PROJECT_NAME }} -o ${PROJECT_NAME}.tar

            - name: Ensure remote directory exists
              uses: appleboy/ssh-action@v0.1.8
              with:
                  host: ${{ secrets.HOST_IP }}
                  username: ${{ secrets.HOST_USERNAME }}
                  key: ${{ secrets.PEM_KEY }}
                  port: 22
                  script: |
                      mkdir -p /home/${{ env.PROJECT_NAME }}

            - name: Transfer Docker image to remote server
              uses: appleboy/scp-action@v0.1.3
              with:
                  host: ${{ secrets.HOST_IP }}
                  username: ${{ secrets.HOST_USERNAME }}
                  key: ${{ secrets.PEM_KEY }}
                  source: './${PROJECT_NAME}.tar'
                  target: '/home/${{ env.PROJECT_NAME }}'

            - name: Transfer docker-compose.yml to remote server
              uses: appleboy/scp-action@v0.1.3
              with:
                  host: ${{ secrets.HOST_IP }}
                  username: ${{ secrets.HOST_USERNAME }}
                  key: ${{ secrets.PEM_KEY }}
                  source: './docker-compose.yml'
                  target: '/home/${{ env.PROJECT_NAME }}'

            - name: Load Docker image, remove old image, and run container on remote server
              uses: appleboy/ssh-action@v0.1.8
              with:
                  host: ${{ secrets.HOST_IP }}
                  username: ${{ secrets.HOST_USERNAME }}
                  key: ${{ secrets.PEM_KEY }}
                  port: 22
                  script: |
                      cd /home/${{ env.PROJECT_NAME }}
                      if [ ! -f ${PROJECT_NAME}.tar ]; then
                        echo "Docker image file not found!"
                        exit 1
                      fi
                      old_image=$(docker images -q ${{ env.PROJECT_NAME }}:latest)
                      if [ -n "$old_image" ]; then
                        docker rmi -f $old_image
                      fi
                      docker load -i ${PROJECT_NAME}.tar
                      docker compose down
                      docker compose up -d

            - name: Cleanup local Docker image tar
              run: rm ${PROJECT_NAME}.tar
